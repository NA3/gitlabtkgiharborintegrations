#added before-script to change working directory
before_script:
  - cd $CI_PROJECT_DIR/qrcode
  
stages:
  - test
  - build
  - docker-build
  - deploy

#Test stage 
unit test:
  stage: test
  script:
    - echo "Unit Test scripts should go here.."
  
#build stage
maven-build:
  stage: build
  image: maven:latest
  script:
    - mvn package
#docker-build stage
docker build push:
  stage: docker-build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    #- echo $CI_REGISTRY_CA_CERT
    - echo "-------------------------------------------------------------------"
    - echo "${CI_REGISTRY_CA_CERT}" > /kaniko/ssl/certs/jis-certificates.crt
    - echo "Copied Harbor Registry CERT into /kaniko/ssl/certs/jis-certificates.crt:"
    - echo "-------------------------------------------------------------------"
    - cat /kaniko/ssl/certs/jis-certificates.crt
    - echo "-------------------------------------------------------------------"
    - echo "Project Build Dir:"
    - echo $CI_PROJECT_DIR 
    - echo "Target Harbor reposiory image:"
    - echo $CI_REGISTRY_IMAGE
    - /kaniko/executor --context $CI_PROJECT_DIR/qrcode --dockerfile $CI_PROJECT_DIR/qrcode/Dockerfile --destination ${CI_REGISTRY_IMAGE}:${CI_REGISTRY_TAG_DEV}
    - echo "CI/CD job completed, APP image should be available at:"
    - echo ${CI_REGISTRY_IMAGE}:${CI_REGISTRY_TAG_DEV}
  environment:
    name: development
  #build docker app only when a pipeline on master branch is run
  only:
  - master
  
#deploy stage    
deploy to development:
  stage: deploy
  #image: dtzar/helm-kubectl
  image:  "registry.gitlab.com/gitlab-org/cluster-integration/auto-deploy-image:v0.15.0"
  script:
    - echo "Runner in Environment:"
    - echo $CI_ENVIRONMENT_SLUG
    - echo "WILL USE BUILT IN K8s VARS PER ENVIRONENT:"
    - echo "KUBE_URL:" 
    - echo $KUBE_URL
    #- echo "KUBE_TOKEN:"
    #- echo $KUBE_TOKEN
    - echo "KUBE_NAMESPACE:"
    - echo $KUBE_NAMESPACE
    - echo "Path to kubeconfig:"
    - echo  $KUBECONFIG
    - echo "================================="
    - echo "Trying to 'get nodes' using default kubeconfig setting..."
    # will use syntax like kubectl config --kubeconfig=config-demo set-cluster
    - kubectl --kubeconfig="${KUBECONFIG}" get nodes
    - echo "================================="
    - echo "CHECK K8s current context set to:"
    - kubectl config current-context
    - echo "Getting Nodes info w/o using context:"
    - kubectl get nodes
    #- echo "-------------------------------------------------"
    # TODO: add error handling in case if NS exists or just delete proactively
    - kubectl delete ns $KUBE_NAMESPACE
    - sleep 60
    # now create it again
    - kubectl create ns $KUBE_NAMESPACE
    - echo "Creating regcred Docker login secret 'regcred'.."
    - kubectl create secret docker-registry regcred --docker-server=$CI_REGISTRY --docker-username=$CI_REGISTRY_USER --docker-password=$CI_REGISTRY_PASSWORD --docker-email=admin_harbor@acelcab.local
    - kubectl get secrets
    - echo "Will deploy QR Code container app to target cluster/namespace:"
    - kubectl apply -f $CI_PROJECT_DIR/deployment_qrcode.yaml
    - echo "QR Code container App deployed to K8s cluster, checking Pod status:"
    #- kubectl get po -n default
    - kubectl get po -n $KUBE_NAMESPACE
  environment:
    name: development
  #deploy app to K8s only when a pipeline on master branch is run
  only:
  - master
    